<?xml version="1.0"?>
<course>
  <id>{30c9e345-a7c2-4110-b253-1a78123cca63}</id>
  <title>C++</title>
  <description>KTouch lessons file created by KTouchCppLessonsCreator (using seed 42), www.richelbilderbeek.nl/ToolKTouchCppLessonsCreator.htm</description>
  <keyboardLayout>us</keyboardLayout>
  <lessons>
    <lesson>
      <id>{9b8e9517-bf10-4a4d-a122-e0495c46925f}</id>
      <title>Lesson 1: f, j, d, k, s, l, a, ;, g and h</title>
      <newCharacters>fjdksla;gh</newCharacters>
      <text>fkgjh;lsad khaglfd;sj shdk;gjlaf fgkljh;sda ;fldkajghs shdk;gjlaf
shdk;gjlaf khaglfd;sj ;fldkajghs asd;kfhjgl fkgjh;lsad kls;djgahf
fgkljh;sda kls;djgahf shdk;gjlaf asd;kfhjgl fdlaghs;jk fkgjh;lsad
asd;kfhjgl gjh;fksald ;fldkajghs fkgjh;lsad gjh;fksald hajksfdl;g
gjh;fksald fkgjh;lsad khaglfd;sj kls;djgahf fdlaghs;jk shdk;gjlaf
fgkljh;sda hajksfdl;g khaglfd;sj fdlaghs;jk kls;djgahf fgkljh;sda
gjh;fksald kls;djgahf asd;kfhjgl kls;djgahf fkgjh;lsad fgkljh;sda
gjh;fksald hajksfdl;g asd;kfhjgl ;fldkajghs fgkljh;sda hajksfdl;g
kls;djgahf gjh;fksald ;fldkajghs hajksfdl;g fdlaghs;jk asd;kfhjgl
asd;kfhjgl kls;djgahf gjh;fksald fkgjh;lsad hajksfdl;g fgkljh;sda</text>
    </lesson>
    <lesson>
      <id>{c19b3488-8957-49ee-9e30-294d11b57adc}</id>
      <title>Lesson 2: c, n, v, m, b, ,, ., x, z and /</title>
      <newCharacters>cnvmb,.xz/</newCharacters>
      <text>bm.cvzx/n, vncm/bzx,. xz,./bncmv asm ,zv.x/cbmn asm ,zc.x/nmvb
/v.,xcmzbn zv,b/.mnxc ,/cxmznv.b asm asm ,zc.x/nmvb vxmcz/n,b.
,zc.x/nmvb asm /v.,xcmzbn vncm/bzx,. ,/cxmznv.b vxmcz/n,b. asm
zv,b/.mnxc vxmcz/n,b. asm ,zv.x/cbmn asm /,zxmcbvn. xz,./bncmv
asm vxmcz/n,b. xz,./bncmv asm /,zxmcbvn. bm.cvzx/n, vncm/bzx,.
asm /v.,xcmzbn xz,./bncmv vxmcz/n,b. zv,b/.mnxc vncm/bzx,. asm
asm vxmcz/n,b. ,zc.x/nmvb asm zv,b/.mnxc xz,./bncmv ,/cxmznv.b
,zv.x/cbmn bm.cvzx/n, asm ,/cxmznv.b ,zc.x/nmvb zv,b/.mnxc asm
,zc.x/nmvb ,zv.x/cbmn asm asm ,/cxmznv.b vxmcz/n,b. vncm/bzx,.
,zc.x/nmvb ,zv.x/cbmn asm ,/cxmznv.b asm /v.,xcmzbn xz,./bncmv</text>
    </lesson>
    <lesson>
      <id>{0e2f2f68-04d0-4b05-90e4-79a1031765c5}</id>
      <title>Lesson 3: e, u, r, i, t, o, y, p, w, q, [ and ]</title>
      <newCharacters>euritoypwq[]</newCharacters>
      <text>while io[]uypetwrq void export double if true friend short break; auto
try long break while char wrqp]y[oetui double public throw private
using auto void for this default float break throw p]wryq[tieou throw
double sizeof .size virtual virtual typeid io[]uypetwrq true auto
.empty typeid io[]uypetwrq friend try double try new while .empty
wrqp]y[oetui short mutable float constexpr .empty sizeof export
mutable typeid for private urtwpi]oq[ye enum default void friend try
const virtual typeid auto uqip[oewy]rt throw mutable double private
export .empty wryt[ipeuq]o private public int export public new throw
.empty constexpr while char urtwpi]oq[ye .empty typeid private true</text>
    </lesson>
    <lesson>
      <id>{65a42157-d5b1-40b9-a2f8-d3750ca8edb2}</id>
      <title>Lesson 4: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, - and =</title>
      <newCharacters>0123456789-=</newCharacters>
      <text>t[0] do break private w[0] t[0] this v[0] w[0] s[0] 360579=-4128 v[1]
v[0] .size if mutable v[1] float long s[0] new t[0] w[0] 156472-0893=
156472-0893= w[0] false float v[1] t[0] s[0] t[0] v[0] int for s[0]
t[0] w[0] .empty signed v[1] using for w[0] 8-943051267= s[0] v[0] void
mutable t[0] v[1] s[0] v[0] t[0] .at throw w[0] for v[1] 360579=-4128
const sizeof v[0] w[0] w[0] 04=6392158-7 s[0] using t[0] s[0] v[1]
try t[0] 47=860-19523 switch s[0] s[0] w[0] v[0] this v[1] typeid case
v[0] sizeof v[1] w[0] .at virtual 8-943051267= t[0] false break s[0]
v[0] t[0] s[0] w[0] if const v[0] 876=405-2319 private export v[1]
break for long virtual w[0] s[0] t[0] v[0] switch 47=860-19523 v[1]</text>
    </lesson>
    <lesson>
      <id>{11ded808-1804-482f-b845-e16c4c2bb587}</id>
      <title>Lesson 5: ` and \</title>
      <newCharacters>`\</newCharacters>
      <text>private constexpr v[1] \n default public `\`\``\\\` w[0] friend false
mutable asm false try v[1] typeid auto export \```\\`\\` final true \n
\n char sizeof .size \``\`\`\\` private final switch false auto break
switch \n friend double default int export alignof \`\`\``\\` break do
double mutable \``\`\`\\` break; enum \n using this friend try \n final
auto char \`\`\\`\`` sizeof typeid \n false virtual short using this
\n private break if sizeof for short int \```\\`\\` void alignof \n
void .at `\``\\\``\ short new while virtual .empty using \n do default
false long friend break; \n public t[0] switch final \`\``\\`\` true
t[0] w[0] \n new break signed break; `\``\\\``\ \n sizeof mutable while</text>
    </lesson>
    <lesson>
      <id>{0a74ee2b-0aee-4b57-b5bb-362382842ff7}</id>
      <title>Lesson 6: { and }</title>
      <newCharacters>{}</newCharacters>
      <text>{}{}{}{{}}}{ export {1} for throw {1} {0} switch case .at .size enum {0}
{0} {0} public try {1} {1} {0} while char this {1} {}{{}{}}}{}{ enum long
true float {1} {0} this constexpr break; v[1] {1} {0} }{{{}{}}{}}{ t[0]
{}{{{{}}}}{} switch {0} using if {1} asm {0} {1} alignof .at mutable
{0} v[0] t[0] }}}{{{}{{}{} double {1} w[0] short {1} switch v[1] {0}
constexpr long double float .empty {0} }{{{{{}}}}}{ {0} {1} switch {1}
{0} s[0] constexpr {1} switch break; {0} default case {1} {}{}{}{{}}}{
try break double {0} int friend enum }{{{}{}}{}}{ {1} {1} {0} {1}
{1} {0} {1} false t[0] public short double {}{{{{}}{}}} {0} long w[0]
virtual {0} .size asm this {1} {0} char sizeof {1} {}{{{{}}{}}} {0}</text>
    </lesson>
    <lesson>
      <id>{423ae734-0f60-4b78-aa6e-742611ed24b8}</id>
      <title>Lesson 7: ? and :</title>
      <newCharacters>?:</newCharacters>
      <text>??::?::??:?: float int private: public: {0} enum case: default:
private: default: ?:?::??:::?? mutable private public: try case:
??::?::??:?: public: case case: \n virtual for v[0] default: private:
float default: constexpr case: public: private: ??:::?::??:?
private: {1} using mutable public: false default: case: ?:?::??:::??
export ??::?::??:?: case: true private: default: default: public:
private: char case: sizeof :?:?::??:??: public: .empty default:
constexpr :?:?::??:??: public: case: default: t[0] short private:
t[0] case: private: switch friend default: v[0] ?:?:?:?::??: public:
private: :?????::::?: default: case: break public: constexpr</text>
    </lesson>
    <lesson>
      <id>{40f14104-2ccf-41f7-af6e-10ab8b9e2519}</id>
      <title>Lesson 8: + and _</title>
      <newCharacters>+_</newCharacters>
      <text>.at int wchar_t w[0] for char32_t .size char16_t +_++_+_+__+_ using
char16_t +___+__++++_ default: asm wchar_t wchar_t sizeof char32_t
char16_t final _+_+_+_+_+_+ {1} wchar_t while char32_t v[1] alignof
char16_t +_++_+___++_ case: do v[1] char32_t wchar_t true char int
new wchar_t char32_t sizeof +___+__++++_ char16_t virtual public if
wchar_t char16_t false char16_t _+_+++___+_+ .empty char32_t asm
char16_t ++__+++_+___ virtual v[1] if char32_t auto wchar_t long
break _+_+++___+_+ final wchar_t new char16_t this char32_t default:
char32_t wchar_t ___+_++_+++_ char16_t .size v[1] private: case: new
v[1] final wchar_t for virtual char16_t false +___+__++++_ char32_t</text>
    </lesson>
    <lesson>
      <id>{b3b86cb4-0b47-4026-a95d-21eaa6f02bc4}</id>
      <title>Lesson 9: ( and )</title>
      <newCharacters>()</newCharacters>
      <text>)()()(())(() .empty() v.empty() .size() .at(i) v.at(1) w.size()
w.at(0) v.size() )()()(())(() s.at(0) w.empty() .empty() w.size()
)()()(())(() v.at(1) w.size() v.size() .size() t.size() .at(i)
s.empty() .empty() .size() w.size() )()((())()() w.empty() v.at(1)
s.empty() w.at(0) .empty() .at(i) ())(()))((() w.size() .size()
)()((())()() .empty() w.at(0) v.at(1) s.empty() w.size() t.size()
w.empty() w.size() v.at(1) )(()()(())() .empty() t.size() v.at(0)
)(()))))(((( s.at(0) s.empty() v.at(0) v.at(0) s.empty() t.size()
s.at(0) s.empty() .empty() v.at(1) ())(()))((() w.at(0) v.empty()
v.size() v.empty() v.at(1) (((()(())))) .at(i) .empty() w.empty()</text>
    </lesson>
    <lesson>
      <id>{c70aedbb-42f9-4d01-9e46-729e40498287}</id>
      <title>Lesson 10: ! and *</title>
      <newCharacters>!*</newCharacters>
      <text>switch a!=b *!*!!*!*!**! */ char32_t w.empty() i!=j /* */ .at(i) !=
i!=j a!=b true /* false public w.empty() != v[0] *!*!!*!*!**! */
break; double */ a!=b int switch friend /* *!*!!*!*!**! != i!=j true
v[1] /* t.size() /* while a!=b !**!**!*!!*! != */ a!=b v[0] mutable i!=j
virtual final export /* {0} i!=j */ .empty !!!***!**!!* try a!=b != */
*/ new while double const !!**!***!!!* != i!=j /* t.size() a!=b w[0] do
enum /* .empty i!=j */ this private a!=b != !****!!!!!** using public:
!= private: alignof */ break; **!!**!!**!! i!=j /* .at(i) a!=b
!= !**!**!*!!*! i!=j */ char32_t w.empty() /* a!=b != break virtual
a!=b !****!!!!!** char s.empty() /* i!=j */ != w.size() s.at(0)</text>
    </lesson>
    <lesson>
      <id>{f5be6de6-3052-4292-ac8c-e1de7c6e33f0}</id>
      <title>Lesson 11: | and ^</title>
      <newCharacters>|^</newCharacters>
      <text>while case: != */ alignof ^= ^|||^^^^||^| .empty() signed double
^= const v.empty() ^^|^^||||^^| throw while w.size() mutable {0}
typeid const try case default ^= this mutable |^|^^^|||^|^ .empty()
t[0] constexpr |^^|^^|||^|^ true s.at(0) ^= sizeof using {0} false {1}
auto private wchar_t int default: v.size() s[0] ^|||^^^^||^| .at ^= !=
public: void asm t.size() w[0] final .size() ^^|^^||||^^| ^= .empty()
double != try /* |^^|^^|||^|^ break; ^= */ switch wchar_t private:
wchar_t v.empty() .empty ^= asm final .at public new auto |^||^||^^^|^
\n break; typeid ^^|||||^^|^^ switch false .size() s.empty() ^=
/* != |^|^^^||^|^| virtual ^= asm true public: this friend switch</text>
    </lesson>
    <lesson>
      <id>{b7019671-52f7-4e0f-9aea-a6fcf56642e1}</id>
      <title>Lesson 12: # and ~</title>
      <newCharacters>#~</newCharacters>
      <text>#elif #include case char16_t void ~###~#~#~~##~~ export sizeof
v.at(0) i!=j #elif #include a!=b #~~~#~#~#~~### w.at(0) private */
##~###~~~~~#~# v[0] #include .at #elif short w.empty() final s.at(0)
##~#~#~###~~~~ #include i!=j w.empty() short double /* #elif
false public short #include ~#~#~~#~~#~### #elif sizeof i!=j
default: .at \n if #include using #elif v.empty() #~#~##~#~~##~~
private: t[0] #include private #elif #~#~##~#~~##~~ i!=j asm
v[1] #elif .empty #include /* {0} public: .size ##~###~~~~~#~# signed
#include final #include #elif char ~#~#~~#~~#~### .at(i) double
#include default friend char #~#~##~#~~##~~ constexpr #elif ^= asm</text>
    </lesson>
    <lesson>
      <id>{8073a092-54f7-40ad-bab6-d2a9229a3bd8}</id>
      <title>Lesson 13: %, @ and $</title>
      <newCharacters>%@$</newCharacters>
      <text>if char16_t v[0] */ %@@@$%@%$$@%%$$ enum private: v.size() friend
void short t.size() for case: char final %$$%@@$$$%%%@@@ s[0] mutable
break w.size() s.empty() sizeof v.at(1) %$$%@@$$$%%%@@@ false #elif
@@%@$$%$@@$$%%% v.empty() long while s[0] alignof v.size() export
s[0] switch sizeof s.at(0) */ char wchar_t char32_t $%$@$%%$@@$%@@%
virtual while v[0] auto sizeof $%@@@%$@%$@$%%$ public: #elif this
w[0] .at for @%$$%@%$%$@@$%@ v.at(0) long #elif != switch .empty
while s[0] case: @@$$%$$@%@$%%%@ .at v.at(0) virtual constexpr
@@%@$$%$@@$$%%% #include throw v.empty() sizeof i!=j w[0] short v[0]
%@@@$%@%$$@%%$$ auto s.at(0) float typeid w[0] throw */ v.at(0) true</text>
    </lesson>
  </lessons>
</course>
